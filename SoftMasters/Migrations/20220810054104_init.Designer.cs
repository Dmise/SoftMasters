// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

#nullable disable

namespace SoftMasters.test.Migrations
{
    [DbContext(typeof(SMDbContext))]
    [Migration("20220810054104_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebApp.Models.Car", b =>
                {
                    b.Property<int>("CarNumber")
                        .HasColumnType("int")
                        .HasColumnName("CarId");

                    b.Property<string>("CompositionNumber")
                        .IsRequired()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("CompositionNumber");

                    b.Property<string>("FreightName")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.Property<int>("PositionInTarin")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("CarNumber");

                    b.HasIndex("CompositionNumber");

                    b.HasIndex("FreightName");

                    b.HasIndex("InvoiceNumber");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("WebApp.Models.Composition", b =>
                {
                    b.Property<string>("CombinedTrainIndex")
                        .HasColumnType("varchar(95)");

                    b.Property<int>("TrainId")
                        .HasColumnType("int");

                    b.HasKey("CombinedTrainIndex");

                    b.HasIndex("TrainId");

                    b.ToTable("Compositions");
                });

            modelBuilder.Entity("WebApp.Models.Freight", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(95)");

                    b.HasKey("Name");

                    b.ToTable("Freights");
                });

            modelBuilder.Entity("WebApp.Models.Invoice", b =>
                {
                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("varchar(95)");

                    b.HasKey("InvoiceNumber");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("WebApp.Models.Operation", b =>
                {
                    b.Property<DateTime>("WhenLastOperation")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CarNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastOperationName")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.HasKey("WhenLastOperation", "CarNumber");

                    b.HasIndex("CarNumber");

                    b.HasIndex("LastOperationName");

                    b.HasIndex("StationName");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("WebApp.Models.OperationName", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(90)");

                    b.HasKey("Name");

                    b.ToTable("OperationNames");
                });

            modelBuilder.Entity("WebApp.Models.Station", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(90)");

                    b.HasKey("Name");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("WebApp.Models.Train", b =>
                {
                    b.Property<int>("TrainId")
                        .HasColumnType("int");

                    b.Property<string>("FromStationName")
                        .HasColumnType("varchar(90)");

                    b.Property<string>("ToStationName")
                        .HasColumnType("varchar(90)");

                    b.HasKey("TrainId", "FromStationName", "ToStationName");

                    b.HasIndex("FromStationName");

                    b.HasIndex("ToStationName", "FromStationName");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("WebApp.Models.Car", b =>
                {
                    b.HasOne("WebApp.Models.Composition", "_Composition")
                        .WithMany()
                        .HasForeignKey("CompositionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Freight", "_Freight")
                        .WithMany()
                        .HasForeignKey("FreightName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Invoice", "_Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Composition");

                    b.Navigation("_Freight");

                    b.Navigation("_Invoice");
                });

            modelBuilder.Entity("WebApp.Models.Composition", b =>
                {
                    b.HasOne("WebApp.Models.Train", "Train")
                        .WithMany("Compositions")
                        .HasForeignKey("TrainId")
                        .HasPrincipalKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Train");
                });

            modelBuilder.Entity("WebApp.Models.Operation", b =>
                {
                    b.HasOne("WebApp.Models.Car", "_Car")
                        .WithMany()
                        .HasForeignKey("CarNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.OperationName", "_OperationName")
                        .WithMany()
                        .HasForeignKey("LastOperationName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Station", "_Station")
                        .WithMany()
                        .HasForeignKey("StationName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Car");

                    b.Navigation("_OperationName");

                    b.Navigation("_Station");
                });

            modelBuilder.Entity("WebApp.Models.Train", b =>
                {
                    b.HasOne("WebApp.Models.Station", "fromStation")
                        .WithMany("TrainsFrom")
                        .HasForeignKey("FromStationName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Station", "toStation")
                        .WithMany("TrainsTo")
                        .HasForeignKey("ToStationName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("fromStation");

                    b.Navigation("toStation");
                });

            modelBuilder.Entity("WebApp.Models.Station", b =>
                {
                    b.Navigation("TrainsFrom");

                    b.Navigation("TrainsTo");
                });

            modelBuilder.Entity("WebApp.Models.Train", b =>
                {
                    b.Navigation("Compositions");
                });
#pragma warning restore 612, 618
        }
    }
}
